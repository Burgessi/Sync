<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pro.sync.employee.dao.EmployeeDaoImpl">
	<!-- 사원 등록 -->
	<insert id="insertEmployee">
		INSERT INTO EMPLOYEE (
		EMP_ID,
		EMP_NAME,
		EMP_SSN,
		EMP_GENDER,
		RANK_ID,
		EMP_LEAD,
		TEAM_CODE,
		EMP_HIRE_DATE,
		AUTHORITY
		) VALUES
		((SELECT
		'A' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(EMP_ID, 2))), 0)
		+ 1, 3,
		'0')
		FROM
		EMPLOYEE),#{emp_name},#{emp_ssn},
		#{emp_gender},#{rank_id},#{emp_lead},#{team_code}
		,CURRENT_DATE,
		#{authority})
	</insert>

	<!-- 사원 전체 조회 -->
	<select id="getAllEmployee" resultType="EmployeeVo">
		SELECT e.EMP_ID AS
		emp_id,
		e.EMP_NAME AS emp_name,
		e.EMP_EMAIL AS emp_email,
		t.TEAM_NAME AS
		team_name,
		r.RANK_NAME AS rank_name,
		r.RANK_ID AS rank_id,
		TO_CHAR(e.EMP_HIRE_DATE,'YYYY-MM-DD') AS emp_hire_date,
		e.EMP_STATUS AS
		emp_status,
		d.DIVISION_NAME AS division_name,
		e.TEAM_CODE,
		e.EMP_LEAVING_DATE
		FROM EMPLOYEE e
		JOIN TEAM t ON t.TEAM_CODE =
		e.TEAM_CODE
		JOIN "RANK" r ON r.RANK_ID =e.RANK_ID
		JOIN DIVISION d ON
		t.UPSTAIRS_DIVISION_CODE =d.DIVISION_CODE
		ORDER BY
		CASE
		WHEN e.EMP_STATUS
		= 'B' THEN 1
		WHEN e.EMP_STATUS = 'A' THEN 2
		WHEN e.EMP_STATUS = 'C' THEN
		3
		WHEN e.EMP_STATUS = 'D' THEN 4
		ELSE 5
		END,
		EMP_ID DESC

	</select>

	<!-- 사원 전체 조회 페이징 -->
	<select id="allEmployee" resultType="EmployeeVo">
		SELECT * FROM (
		SELECT e.EMP_ID AS emp_id,
		e.EMP_NAME AS emp_name,
		e.EMP_EMAIL AS emp_email,
		t.TEAM_NAME AS team_name,
		r.RANK_NAME AS rank_name,
		TO_CHAR(e.EMP_HIRE_DATE,'YYYY-MM-DD') AS emp_hire_date,
		e.EMP_STATUS AS emp_status,
		d.DIVISION_NAME AS division_name,
		e.TEAM_CODE,
		e.EMP_LEAVING_DATE,
		<!-- ROW_NUMBER() OVER (ORDER BY e.EMP_ID DESC) AS RN -->
		ROW_NUMBER() OVER (
			ORDER BY
				CASE 
					WHEN e.EMP_STATUS = 'B' THEN 1
					WHEN e.EMP_STATUS = 'A' THEN 2
					WHEN e.EMP_STATUS = 'C' THEN 3
					WHEN e.EMP_STATUS = 'D' THEN 4
					ELSE 5
				END,
				e.EMP_ID DESC
		) AS RN
		FROM EMPLOYEE e
		JOIN TEAM t ON t.TEAM_CODE = e.TEAM_CODE
		JOIN "RANK" r ON r.RANK_ID = e.RANK_ID
		JOIN DIVISION d ON t.UPSTAIRS_DIVISION_CODE = d.DIVISION_CODE		
		)
		WHERE RN BETWEEN #{startIndex} AND #{endIndex}
	</select>

	<select id="totalCount" resultType="Integer">
		SELECT COUNT(*)
		FROM EMPLOYEE
	</select>

	<!-- 사원 상세 조회 -->
	<select id="employeeSelectDetail" resultType="EmployeeVo">
		SELECT
		e.EMP_ID,
		e.EMP_NAME,
		d.DIVISION_NAME,
		t.TEAM_NAME,
		r.RANK_NAME,
		e.EMP_LEAD,
		e.EMP_EMAIL,
		e.EMP_STATUS,
		e.AUTHORITY,
		a.BANK_NAME,
		a.ACCOUNT_NUM,
		e.ADDR1,
		e.ADDR2,
		e.EMP_PROFILE_PIC,
		TO_CHAR(e.EMP_HIRE_DATE,
		'YYYY-MM-DD') AS EMP_HIRE_DATE
		FROM
		EMPLOYEE e
		FULL OUTER JOIN TEAM t ON
		t.TEAM_CODE = e.TEAM_CODE
		FULL
		OUTER JOIN "RANK" r ON r.RANK_ID =
		e.RANK_ID
		FULL OUTER JOIN DIVISION d
		ON t.UPSTAIRS_DIVISION_CODE =
		d.DIVISION_CODE
		FULL OUTER JOIN ACCOUNT a
		ON a.EMP_ID = e.EMP_ID
		WHERE
		e.EMP_ID = #{emp_id}
	</select>


	<!-- 사원 수정 -->
	<update id="updateEmployee" parameterType="java.util.Map">
		UPDATE EMPLOYEE e
		<set>
			<if test="team_code != null and team_code != ''">
				TEAM_CODE = #{team_code},
			</if>
			<if test="rank_id != null and rank_id != ''">
				RANK_ID = #{rank_id},
			</if>
			<if test="authority != null and authority != ''">
				AUTHORITY = #{authority},
			</if>
			<if test="emp_lead != null and emp_lead != ''">
				EMP_LEAD = #{emp_lead},
			</if>
			<if test="emp_signature != null and emp_signature != ''">
				EMP_SIGNATURE = #{emp_signature},
			</if>
			<if test="total_off != null and total_off != ''">
				TOTAL_OFF = #{total_off}
			</if>
		</set>
		WHERE e.EMP_ID = #{emp_id}
	</update>

	<!-- 사원 삭제 -->
	<update id="deleteEmployee">
		UPDATE EMPLOYEE
		SET EMP_STATUS ='D',
		EMP_LEAVING_DATE=CURRENT_DATE <!-- 퇴사일 함께 업데이트 -->
		WHERE EMP_ID =#{emp_id}
	</update>
	
	
	<select id="searchEmployee" resultType="EmployeeVo">
		SELECT e.EMP_ID, e.EMP_NAME, d.DIVISION_NAME, e.EMP_STATUS, t.TEAM_NAME, e.EMP_EMAIL, 
		r.RANK_NAME, e.EMP_LEAD, TO_CHAR(e.EMP_HIRE_DATE, 'YYYY-MM-DD') AS EMP_HIRE_DATE
		FROM EMPLOYEE e
		JOIN TEAM t ON t.TEAM_CODE = e.TEAM_CODE
		JOIN DIVISION d ON t.UPSTAIRS_DIVISION_CODE = d.DIVISION_CODE
		JOIN RANK r ON e.RANK_ID = r.RANK_ID
		WHERE 1=1
		<choose>
			<when test="opt=='emp_name'">
				AND e.EMP_NAME LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				AND d.DIVISION_NAME LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
	</select>


	<insert id="insertOffHistory">
	
		INSERT INTO OFF_HISTORY
		(OFF_HISTORY_ID, OFF_DATE, 
				OFF_REASON, EMP_ID)
				<foreach collection="off_date" item="date" index="index" separator=" UNION ALL " >
					SELECT	 (SELECT 'OFF' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(OFF_HISTORY_ID, 4))), 0) + #{index} + 1, 3, '0') 
								FROM OFF_HISTORY),
					    #{date},
					    #{off_reason},
					    #{emp_id}
					    			FROM DUAL
				</foreach>
	</insert>

</mapper>
